name: Build and Test
on: push
jobs:
  check-formating:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Setup Go
      uses: actions/setup-go@v2
      with:
        go-version: '1.13.6'
    - name: Install golint
      run: |
        go version
        go get -u golang.org/x/lint/golint
    - name: Check Source formatting
      run: X=`make fmt` && if [[ "x$X" != "x" ]]; then echo $X && false; fi
    - name: Lint source code
      run: X=`make lint` && if [[ "x$X" != "x" ]]; then echo $X && false; fi
  unit-tests:
    runs-on: ubuntu-latest
    needs: check-formating
    steps:
      - uses: actions/checkout@v2
      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.13.6'
      - name: Install golint
        run: |
          go version
          go get -u golang.org/x/lint/golint
      - name: Install goveralls
        run: |
          go version
          go get github.com/mattn/goveralls@latest
      - name: Run Unit Tests
        run: make test  
      - name: Run Code Coverage
        run: goveralls -coverprofile=coverage.out -service=circle-ci -repotoken ${{ secrets.COVERALLS_TOKEN }}
      - name: Upload Coverage artifacts
        uses: actions/upload-artifact@v2
        with:
          name: coverage.out
          path: coverage.out
  build-operator-image:
    runs-on: ubuntu-latest
    needs: unit-tests
    env:
      SPLUNK_ENTERPRISE_IMAGE: splunk/splunk:edge
      SPLUNK_OPERATOR_IMAGE_NAME: splunk/splunk-operator
      ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
      S3_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
    steps:
    - uses: actions/checkout@v2
    - name: Dotenv Action
      id: dotenv
      uses: falti/dotenv-action@v0.2.7
    - name: setup-docker
      uses: docker-practice/actions-setup-docker@v1
    - name: Install Operator SDK
      run: |
        sudo curl -L -o /usr/local/bin/operator-sdk https://github.com/operator-framework/operator-sdk/releases/download/${{ steps.dotenv.outputs.OPERATOR_SDK_VERSION }}/operator-sdk-${{ steps.dotenv.outputs.OPERATOR_SDK_VERSION }}-x86_64-linux-gnu
        sudo chmod +x /usr/local/bin/operator-sdk
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    - name: Make Splunk Operator Image
      run: |
        docker pull registry.access.redhat.com/ubi8/ubi-minimal:latest
        operator-sdk build --verbose ${{ secrets.ECR_REPOSITORY }}/${{ env.SPLUNK_OPERATOR_IMAGE_NAME }}:$GITHUB_SHA
    - name: Push Splunk Operator Image to ECR
      run: |
        echo "Uploading Image to ECR:: ${{ env.SPLUNK_OPERATOR_IMAGE_NAME }}:$GITHUB_SHA"
        docker push ${{ secrets.ECR_REPOSITORY }}/${{ env.SPLUNK_OPERATOR_IMAGE_NAME }}:$GITHUB_SHA
  vulnerability-scan:
    runs-on: ubuntu-latest
    needs: build-operator-image
    env:
      SPLUNK_ENTERPRISE_IMAGE: splunk/splunk:edge
      SPLUNK_OPERATOR_IMAGE_NAME: splunk/splunk-operator
      ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
      S3_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
    steps:
    - uses: actions/checkout@v2
    - name: setup-docker
      uses: docker-practice/actions-setup-docker@v1
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v1
    - name: Pull Splunk Operator Image Locally
      run: |
        docker pull ${{ secrets.ECR_REPOSITORY }}/${{ env.SPLUNK_OPERATOR_IMAGE_NAME }}:$GITHUB_SHA
    - name: Change Operator Image Tag to latest
      run: |
        docker tag ${{ secrets.ECR_REPOSITORY }}/${{ env.SPLUNK_OPERATOR_IMAGE_NAME }}:$GITHUB_SHA ${{ env.SPLUNK_OPERATOR_IMAGE_NAME }}:latest
    - name: Setup clair scanner
      run: make setup_clair_scanner
    - name: Scan container image
      run: make run_clair_scan
    - name: Stop clair scanner
      run: make stop_clair_scanner
    - name: Save scan results as artifacts
      uses: actions/upload-artifact@v2
      with:
        name: clair-scanner-logs
        path: clair-scanner-logs
  smoke-tests:
    needs: vulnerability-scan
    strategy:
      matrix:
        test: [basic, appframework, secret, monitoringconsole]
    runs-on: ubuntu-latest
    env:
      CLUSTER_NODES: 1
      CLUSTER_WORKERS: 3
      SPLUNK_ENTERPRISE_IMAGE: splunk/splunk:edge
      SPLUNK_OPERATOR_IMAGE_NAME: splunk/splunk-operator
      SPLUNK_OPERATOR_IMAGE_FILENAME: splunk-operator
      TEST_FOCUS: "${{ matrix.test }}"
      # This regex matches any string not containing smoke keyword
      TEST_TO_SKIP: "^(?:[^s]+|s(?:$|[^m]|m(?:$|[^o]|o(?:$|[^k]|k(?:$|[^e])))))*$"
      TEST_CLUSTER_PLATFORM: eks
      EKS_VPC_PRIVATE_SUBNET_STRING: ${{ secrets.EKS_VPC_PRIVATE_SUBNET_STRING }}
      EKS_VPC_PUBLIC_SUBNET_STRING: ${{ secrets.EKS_VPC_PUBLIC_SUBNET_STRING }}
      TEST_BUCKET: ${{ secrets.TEST_BUCKET }}
      TEST_INDEXES_S3_BUCKET: ${{ secrets.TEST_INDEXES_S3_BUCKET }}
      ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
      PRIVATE_REGISTRY: ${{ secrets.ECR_REPOSITORY }}
      S3_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      ENTERPRISE_LICENSE_LOCATION: ${{ secrets.ENTERPRISE_LICENSE_LOCATION }}
    steps:
      - name: Set Test Cluster Name
        run: | 
          echo "TEST_CLUSTER_NAME=eks-integration-test-cluster-${{ matrix.test }}-$GITHUB_RUN_ID" >> $GITHUB_ENV
      - name: Set Test Cluster Nodes and Parallel Runs
        run: >-
          if [ ${{ matrix.test }} == "appframework" ]; then 
            echo "CLUSTER_WORKERS=5" >> $GITHUB_ENV
            echo "CLUSTER_NODES=2" >> $GITHUB_ENV  
          fi
      - name: Chekcout code
        uses: actions/checkout@v2  
      - name: Dotenv Action
        id: dotenv
        uses: falti/dotenv-action@v0.2.7 
      - name: Install Kubectl
        uses: Azure/setup-kubectl@v1
        with:
          version: 'v1.16.13'
      - name: Install Python
        uses: actions/setup-python@v2
      - name: Install AWS CLI
        run: |
          curl "https://s3.amazonaws.com/aws-cli/awscli-bundle-1.20.8.zip" -o "awscli-bundle.zip"
          unzip awscli-bundle.zip
          sudo ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
          aws --version
      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.13.6'
      - name: Install Go Lint
        run: |
          go version
          go get -u golang.org/x/lint/golint
      - name: Install Ginkgo 
        run: |
            go get github.com/onsi/ginkgo/ginkgo
            go get github.com/onsi/gomega/...
      - name: Install EKS CTL
        run: |
          curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
          sudo mv /tmp/eksctl /usr/local/bin
          eksctl version
      - name: setup-docker
        uses: docker-practice/actions-setup-docker@v1
      - name: Install Operator SDK
        run: |
          sudo curl -L -o /usr/local/bin/operator-sdk https://github.com/operator-framework/operator-sdk/releases/download/${{ steps.dotenv.outputs.OPERATOR_SDK_VERSION }}/operator-sdk-${{ steps.dotenv.outputs.OPERATOR_SDK_VERSION }}-x86_64-linux-gnu
          sudo chmod +x /usr/local/bin/operator-sdk
      - name: Configure Docker Hub credentials
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN}}
      - name: Pull Splunk Enterprise Edge Image
        run: docker pull ${{ env.SPLUNK_ENTERPRISE_IMAGE }}
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Tag and Push Splunk Enterprise Image to ECR
        run: |
          docker tag ${{ env.SPLUNK_ENTERPRISE_IMAGE }} ${{ secrets.ECR_REPOSITORY }}/${{ env.SPLUNK_ENTERPRISE_IMAGE }}
          docker push ${{ secrets.ECR_REPOSITORY }}/${{ env.SPLUNK_ENTERPRISE_IMAGE }}
      - name: Pull Splunk Operator Image Locally
        run: |
          docker pull ${{ secrets.ECR_REPOSITORY }}/${{ env.SPLUNK_OPERATOR_IMAGE_NAME }}:$GITHUB_SHA
      - name: Change Operator Image Tag to latest
        run: |
          docker tag ${{ secrets.ECR_REPOSITORY }}/${{ env.SPLUNK_OPERATOR_IMAGE_NAME }}:$GITHUB_SHA ${{ env.SPLUNK_OPERATOR_IMAGE_NAME }}:latest
      - name: Create EKS cluster
        run: |
           make cluster-up
      - name: Run smoke test
        run: |
          make int-test
      - name: Cleanup up EKS cluster
        if: ${{ always() }}
        run: | 
           make cluster-down
  push-latest:
    needs: smoke-tests
    if: github.ref == 'refs/heads/master' 
    runs-on: ubuntu-latest
    env:
      SPLUNK_OPERATOR_IMAGE_NAME: splunk/splunk-operator
      TAG: latest
    steps:
    - name: Checkout Code
      uses: actions/checkout@v2
    - name: Dotenv Action
      id: dotenv
      uses: falti/dotenv-action@v0.2.7
    - name: setup-docker
      uses: docker-practice/actions-setup-docker@v1
    - name: Configure Docker Hub credentials
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PUSH_TOKEN}}
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v1
    - name: Pull Splunk Operator Image Locally
      run: |
        docker pull ${{ secrets.ECR_REPOSITORY }}/${{ env.SPLUNK_OPERATOR_IMAGE_NAME }}:$GITHUB_SHA
    - name: Change Operator Image Tag to latest
      run: |
        docker tag ${{ secrets.ECR_REPOSITORY }}/${{ env.SPLUNK_OPERATOR_IMAGE_NAME }}:$GITHUB_SHA ${{ env.SPLUNK_OPERATOR_IMAGE_NAME }}:${{ env.TAG }}
    - name: Push Splunk Operator Image to Docker Hub 
      run: docker push ${{ env.SPLUNK_OPERATOR_IMAGE_NAME }}:${{ env.TAG }}